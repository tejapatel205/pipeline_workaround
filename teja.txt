Definition

The git reflog command is used for Git to record updates made to the tip of branches. It allows to return to commits even to the ones that are not referenced by any branch or any tag. After rewriting history, the reflog includes information about the previous state of branches and makes it possible to go back to that state if needed.
git reflog

There are some git commands, to which a reference specifying parameter or a “ref” can be applied. This parameter serves to point to a commit. With the help of this reflog mechanism, you can keep track of the update time of git refs in the local repository.

Watch a course Watch a video course  
Git & GitHub - The Practical Guide

The basic usage of git reflog command

Generally git reflog is used like the following:

git reflog

It is the shortcut of this:

git reflog show HEAD

The command above outputs the HEAD reflog. The output looks like the following:

a32556a HEAD@{0}: commit: migrating content
ab371fd HEAD@{1}: commit: adding git reflog outline
23a491a HEAD@{2}: checkout: moving from stage to feature/solver
7b119cb HEAD@{3}: checkout: moving from feature/solver to stage
56a183a HEAD@{4}: commit: changing color scheme
7a2aa71 HEAD@{5}: commit: adding more color palettes
a56322b HEAD@{6}: commit: adding color tool package

Reflog references

Be default, git reflog outputs the reflog of the HEAD reference, which is considered to be an iconic reference to the branch, which is currently active. You can access a git ref by using the name@{qualifier} syntax.

Execute the following command for getting the entire reflog of all the references:

git reflog show --all

Pass the current branch name to git reflog show, if you want to see the reflog for it. In the example below displays a reflog for the test_branch branch.

git reflog show test_branch
#32a591f test_branch@{0}: commit: add snippets
#23bae4a test_branch{1}: commit (initial): initial commit

Using the command below will output a reflog for a git stash:

git reflog stash
#0d44de3 stash@{0}: WIP on git_reflog: a567574 adding Vue.js

Timed reflogs

There is an attached timestamp to each reflog entry.They can be leveraged as a qualifier which is token of Git ref pointer syntax. This allows to filter Git reflogs by time. Here are some examples of time qualifiers:

    1.minute.ago
    1.hour.ago
    1.day.ago
    yesterday
    1.week.ago
    1.month.ago
    1.year.ago
    2011-05-17.09:00:00

You can also have a combination of time qualifiers (e.g. 1.week.3.hours.ago), and plural forms (e.g. 5.hours.ago). The refs of time qualifiers can be given to other git commands, like this:

